
MCU1 CARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000232  00800060  0000086a  000008fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012b  00800292  00800292  00000b30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ffb  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd4  00000000  00000000  00002df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011b2  00000000  00000000  000039cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000069c  00000000  00000000  00004b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001148  00000000  00000000  0000521c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000186a  00000000  00000000  00006364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00007bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_12>
  34:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_13>
  38:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3b       	cpi	r26, 0xBD	; 189
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <main>
  8a:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_ReceiveFromTerminal>:
/* this function will be used to convert PIN String to Numeric string */
void APP_ConvertStringToNumericString(uint8_t *pString)
{
	/* counter */
	uint8_t u8_counter=0;
	while(pString[u8_counter] != '\0')
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	89 e9       	ldi	r24, 0x99	; 153
  9e:	92 e0       	ldi	r25, 0x02	; 2
  a0:	0e 94 c2 03 	call	0x784	; 0x784 <USART_Receive>
  a4:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <aStringBuffer>
  a8:	8d 30       	cpi	r24, 0x0D	; 13
  aa:	79 f0       	breq	.+30     	; 0xca <APP_ReceiveFromTerminal+0x38>
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	cf 5f       	subi	r28, 0xFF	; 255
  b0:	ec 2e       	mov	r14, r28
  b2:	f1 2c       	mov	r15, r1
  b4:	87 01       	movw	r16, r14
  b6:	07 56       	subi	r16, 0x67	; 103
  b8:	1d 4f       	sbci	r17, 0xFD	; 253
  ba:	c8 01       	movw	r24, r16
  bc:	0e 94 c2 03 	call	0x784	; 0x784 <USART_Receive>
  c0:	f8 01       	movw	r30, r16
  c2:	80 81       	ld	r24, Z
  c4:	8d 30       	cpi	r24, 0x0D	; 13
  c6:	99 f7       	brne	.-26     	; 0xae <APP_ReceiveFromTerminal+0x1c>
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <APP_ReceiveFromTerminal+0x3e>
  ca:	e1 2c       	mov	r14, r1
  cc:	f1 2c       	mov	r15, r1
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	f7 01       	movw	r30, r14
  d2:	e7 56       	subi	r30, 0x67	; 103
  d4:	fd 4f       	sbci	r31, 0xFD	; 253
  d6:	10 82       	st	Z, r1
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	8c 0f       	add	r24, r28
  dc:	cf 91       	pop	r28
  de:	1f 91       	pop	r17
  e0:	0f 91       	pop	r16
  e2:	ff 90       	pop	r15
  e4:	ef 90       	pop	r14
  e6:	08 95       	ret

000000e8 <APP_APPToTerminalResponse>:
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
  ee:	88 81       	ld	r24, Y
  f0:	88 23       	and	r24, r24
  f2:	39 f0       	breq	.+14     	; 0x102 <APP_APPToTerminalResponse+0x1a>
  f4:	21 96       	adiw	r28, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 bc 03 	call	0x778	; 0x778 <USART_Transmit>
  fc:	89 91       	ld	r24, Y+
  fe:	81 11       	cpse	r24, r1
 100:	fa cf       	rjmp	.-12     	; 0xf6 <APP_APPToTerminalResponse+0xe>
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <APP_CheckCardState>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	be 01       	movw	r22, r28
 114:	6f 5f       	subi	r22, 0xFF	; 255
 116:	7f 4f       	sbci	r23, 0xFF	; 255
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 cf 02 	call	0x59e	; 0x59e <ECUAL_EEPROMRead>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	99 81       	ldd	r25, Y+1	; 0x01
 124:	97 33       	cpi	r25, 0x37	; 55
 126:	09 f4       	brne	.+2      	; 0x12a <APP_CheckCardState+0x22>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0f 90       	pop	r0
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <APP_CommandCompare>:
 132:	81 11       	cpse	r24, r1
 134:	1c c0       	rjmp	.+56     	; 0x16e <APP_CommandCompare+0x3c>
 136:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <aStringBuffer>
 13a:	88 23       	and	r24, r24
 13c:	e1 f1       	breq	.+120    	; 0x1b6 <APP_CommandCompare+0x84>
 13e:	81 34       	cpi	r24, 0x41	; 65
 140:	29 f0       	breq	.+10     	; 0x14c <APP_CommandCompare+0x1a>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret
 146:	38 13       	cpse	r19, r24
 148:	38 c0       	rjmp	.+112    	; 0x1ba <APP_CommandCompare+0x88>
 14a:	01 c0       	rjmp	.+2      	; 0x14e <APP_CommandCompare+0x1c>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	82 2f       	mov	r24, r18
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	e7 56       	subi	r30, 0x67	; 103
 158:	fd 4f       	sbci	r31, 0xFD	; 253
 15a:	30 81       	ld	r19, Z
 15c:	33 23       	and	r19, r19
 15e:	79 f1       	breq	.+94     	; 0x1be <APP_CommandCompare+0x8c>
 160:	fc 01       	movw	r30, r24
 162:	e5 57       	subi	r30, 0x75	; 117
 164:	fd 4f       	sbci	r31, 0xFD	; 253
 166:	80 81       	ld	r24, Z
 168:	81 11       	cpse	r24, r1
 16a:	ed cf       	rjmp	.-38     	; 0x146 <APP_CommandCompare+0x14>
 16c:	08 95       	ret
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	09 f5       	brne	.+66     	; 0x1b4 <APP_CommandCompare+0x82>
 172:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <aStringBuffer>
 176:	88 23       	and	r24, r24
 178:	21 f1       	breq	.+72     	; 0x1c2 <APP_CommandCompare+0x90>
 17a:	85 35       	cpi	r24, 0x55	; 85
 17c:	49 f0       	breq	.+18     	; 0x190 <APP_CommandCompare+0x5e>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret
 182:	fc 01       	movw	r30, r24
 184:	ea 57       	subi	r30, 0x7A	; 122
 186:	fd 4f       	sbci	r31, 0xFD	; 253
 188:	80 81       	ld	r24, Z
 18a:	38 13       	cpse	r19, r24
 18c:	1c c0       	rjmp	.+56     	; 0x1c6 <APP_CommandCompare+0x94>
 18e:	01 c0       	rjmp	.+2      	; 0x192 <APP_CommandCompare+0x60>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	82 2f       	mov	r24, r18
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	e7 56       	subi	r30, 0x67	; 103
 19c:	fd 4f       	sbci	r31, 0xFD	; 253
 19e:	30 81       	ld	r19, Z
 1a0:	33 23       	and	r19, r19
 1a2:	99 f0       	breq	.+38     	; 0x1ca <APP_CommandCompare+0x98>
 1a4:	fc 01       	movw	r30, r24
 1a6:	e5 57       	subi	r30, 0x75	; 117
 1a8:	fd 4f       	sbci	r31, 0xFD	; 253
 1aa:	40 81       	ld	r20, Z
 1ac:	41 11       	cpse	r20, r1
 1ae:	e9 cf       	rjmp	.-46     	; 0x182 <APP_CommandCompare+0x50>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret
 1b4:	08 95       	ret
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	08 95       	ret

000001ce <APP_SmallDelay>:
		u8_counter ++;
	}
}
/********************************************************************************************/
void APP_SmallDelay(void)
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <APP_SmallDelay+0x6>
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <APP_SmallDelay+0x8>
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t u32_counter;
	for (u32_counter=0;u32_counter<500;u32_counter++);
 1da:	19 82       	std	Y+1, r1	; 0x01
 1dc:	1a 82       	std	Y+2, r1	; 0x02
 1de:	1b 82       	std	Y+3, r1	; 0x03
 1e0:	1c 82       	std	Y+4, r1	; 0x04
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	9a 81       	ldd	r25, Y+2	; 0x02
 1e6:	ab 81       	ldd	r26, Y+3	; 0x03
 1e8:	bc 81       	ldd	r27, Y+4	; 0x04
 1ea:	84 3f       	cpi	r24, 0xF4	; 244
 1ec:	91 40       	sbci	r25, 0x01	; 1
 1ee:	a1 05       	cpc	r26, r1
 1f0:	b1 05       	cpc	r27, r1
 1f2:	a0 f4       	brcc	.+40     	; 0x21c <APP_SmallDelay+0x4e>
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	ab 81       	ldd	r26, Y+3	; 0x03
 1fa:	bc 81       	ldd	r27, Y+4	; 0x04
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	a1 1d       	adc	r26, r1
 200:	b1 1d       	adc	r27, r1
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	ab 83       	std	Y+3, r26	; 0x03
 208:	bc 83       	std	Y+4, r27	; 0x04
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	9a 81       	ldd	r25, Y+2	; 0x02
 20e:	ab 81       	ldd	r26, Y+3	; 0x03
 210:	bc 81       	ldd	r27, Y+4	; 0x04
 212:	84 3f       	cpi	r24, 0xF4	; 244
 214:	91 40       	sbci	r25, 0x01	; 1
 216:	a1 05       	cpc	r26, r1
 218:	b1 05       	cpc	r27, r1
 21a:	60 f3       	brcs	.-40     	; 0x1f4 <APP_SmallDelay+0x26>

}
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <APP_StoreDataEEPROM>:
/********************************************************************************************/
uint8_t APP_StoreDataEEPROM(uint8_t *String,enDatatoStore_t DataType)
{  
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	7c 01       	movw	r14, r24
 23a:	d6 2e       	mov	r13, r22
	APP_SmallDelay();
 23c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <APP_SmallDelay>
	/* max size */
	uint8_t u8_MaxSize =0;
	/* start location */
	uint16_t u16_AdressLoc; 
	
	if (DataType==CARD_HOLDER_NAME)
 240:	dd 20       	and	r13, r13
 242:	79 f1       	breq	.+94     	; 0x2a2 <APP_StoreDataEEPROM+0x78>
	{
		/* will start from address 1 */
		u16_AdressLoc = CARD_HOLDER_NAME_ADD ;
		u8_MaxSize = MAX_NAME_SIZE	;
	}
	else if (DataType==PA_NUM)
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	d8 16       	cp	r13, r24
 248:	79 f1       	breq	.+94     	; 0x2a8 <APP_StoreDataEEPROM+0x7e>
	{
		/* will start from address 11 */
		u16_AdressLoc = PAN_ADD;
		u8_MaxSize =MAX_PAN_SIZE;
	}
	else if (DataType==PIN)
 24a:	e2 e0       	ldi	r30, 0x02	; 2
 24c:	de 16       	cp	r13, r30
 24e:	99 f1       	breq	.+102    	; 0x2b6 <APP_StoreDataEEPROM+0x8c>
		u16_AdressLoc = PIN_ADD;
		u8_MaxSize =MAX_PIN_SIZE;
	}
	else
	{
		return EEROR;
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	36 c0       	rjmp	.+108    	; 0x2c0 <APP_StoreDataEEPROM+0x96>
	}
	while(String[u8_counter] != '\0' && u8_counter != u8_MaxSize )
 254:	da e0       	ldi	r29, 0x0A	; 10
 256:	03 c0       	rjmp	.+6      	; 0x25e <APP_StoreDataEEPROM+0x34>
		u8_MaxSize =MAX_PAN_SIZE;
	}
	else if (DataType==PIN)
	{
		/* will start from address 21 */
		u16_AdressLoc = PIN_ADD;
 258:	05 e1       	ldi	r16, 0x15	; 21
 25a:	10 e0       	ldi	r17, 0x00	; 0
		u8_MaxSize =MAX_PIN_SIZE;
 25c:	d5 e0       	ldi	r29, 0x05	; 5
	}
	else
	{
		return EEROR;
	}
	while(String[u8_counter] != '\0' && u8_counter != u8_MaxSize )
 25e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		ECUAL_EEPROMWrite(u16_AdressLoc,String[u8_counter]);
 260:	c8 01       	movw	r24, r16
 262:	0e 94 af 02 	call	0x55e	; 0x55e <ECUAL_EEPROMWrite>
		u8_counter++;
 266:	cf 5f       	subi	r28, 0xFF	; 255
		u16_AdressLoc++;
 268:	0f 5f       	subi	r16, 0xFF	; 255
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
		APP_SmallDelay();
 26c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <APP_SmallDelay>
	}
	else
	{
		return EEROR;
	}
	while(String[u8_counter] != '\0' && u8_counter != u8_MaxSize )
 270:	f7 01       	movw	r30, r14
 272:	ec 0f       	add	r30, r28
 274:	f1 1d       	adc	r31, r1
 276:	60 81       	ld	r22, Z
 278:	66 23       	and	r22, r22
 27a:	21 f0       	breq	.+8      	; 0x284 <APP_StoreDataEEPROM+0x5a>
 27c:	cd 13       	cpse	r28, r29
 27e:	f0 cf       	rjmp	.-32     	; 0x260 <APP_StoreDataEEPROM+0x36>
			ECUAL_EEPROMWrite(u16_AdressLoc,String[u8_counter]);
			return NO_ERROR;
		}
		
	}
	return NO_ERROR;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	1e c0       	rjmp	.+60     	; 0x2c0 <APP_StoreDataEEPROM+0x96>
		u16_AdressLoc++;
		APP_SmallDelay();
		

	}
	if (String[u8_counter] == '\0' && u8_counter != u8_MaxSize )
 284:	cd 17       	cp	r28, r29
 286:	49 f0       	breq	.+18     	; 0x29a <APP_StoreDataEEPROM+0x70>
	{ 
		/* add Null indicator in case of CARD_HOLDER_NAME or PA_NUM */
		if (DataType==CARD_HOLDER_NAME || DataType == PA_NUM)
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	fd 15       	cp	r31, r13
 28c:	40 f0       	brcs	.+16     	; 0x29e <APP_StoreDataEEPROM+0x74>
		{
			ECUAL_EEPROMWrite(u16_AdressLoc,String[u8_counter]);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	c8 01       	movw	r24, r16
 292:	0e 94 af 02 	call	0x55e	; 0x55e <ECUAL_EEPROMWrite>
			return NO_ERROR;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	13 c0       	rjmp	.+38     	; 0x2c0 <APP_StoreDataEEPROM+0x96>
		}
		
	}
	return NO_ERROR;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	11 c0       	rjmp	.+34     	; 0x2c0 <APP_StoreDataEEPROM+0x96>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0f c0       	rjmp	.+30     	; 0x2c0 <APP_StoreDataEEPROM+0x96>
	uint16_t u16_AdressLoc; 
	
	if (DataType==CARD_HOLDER_NAME)
	{
		/* will start from address 1 */
		u16_AdressLoc = CARD_HOLDER_NAME_ADD ;
 2a2:	01 e0       	ldi	r16, 0x01	; 1
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <APP_StoreDataEEPROM+0x82>
		u8_MaxSize = MAX_NAME_SIZE	;
	}
	else if (DataType==PA_NUM)
	{
		/* will start from address 11 */
		u16_AdressLoc = PAN_ADD;
 2a8:	0b e0       	ldi	r16, 0x0B	; 11
 2aa:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
	{
		return EEROR;
	}
	while(String[u8_counter] != '\0' && u8_counter != u8_MaxSize )
 2ac:	f7 01       	movw	r30, r14
 2ae:	60 81       	ld	r22, Z
 2b0:	61 11       	cpse	r22, r1
 2b2:	d0 cf       	rjmp	.-96     	; 0x254 <APP_StoreDataEEPROM+0x2a>
 2b4:	ec cf       	rjmp	.-40     	; 0x28e <APP_StoreDataEEPROM+0x64>
 2b6:	f7 01       	movw	r30, r14
 2b8:	60 81       	ld	r22, Z
 2ba:	61 11       	cpse	r22, r1
 2bc:	cd cf       	rjmp	.-102    	; 0x258 <APP_StoreDataEEPROM+0x2e>
			ECUAL_EEPROMWrite(u16_AdressLoc,String[u8_counter]);
			return NO_ERROR;
		}
		
	}
	return NO_ERROR;
 2be:	81 e0       	ldi	r24, 0x01	; 1
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	df 90       	pop	r13
 2ce:	08 95       	ret

000002d0 <APP_ReadAllData>:
/********************************************************************************************/
  /* will Copy the Data from EEPROM to aDataBuffer */ 
void APP_ReadAllData(void)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
	
	APP_SmallDelay();
 2d4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <APP_SmallDelay>
	/* first Data address location */
	uint16_t u16_location = CARD_PROGRAMMED_CHECK_ADD;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	ec 01       	movw	r28, r24
 2de:	21 96       	adiw	r28, 0x01	; 1
	for(u8_Counter=1;u8_Counter<DATA_BUFFER_SIZE-1;u8_Counter++)
	{
		
		
		
		ECUAL_EEPROMRead(u16_location,(&aDataBuffer[u8_Counter]));
 2e0:	be 01       	movw	r22, r28
 2e2:	68 56       	subi	r22, 0x68	; 104
 2e4:	7c 4f       	sbci	r23, 0xFC	; 252
 2e6:	0e 94 cf 02 	call	0x59e	; 0x59e <ECUAL_EEPROMRead>
		u16_location++;
		APP_SmallDelay();
 2ea:	0e 94 e7 00 	call	0x1ce	; 0x1ce <APP_SmallDelay>
	{
		
		
		
		ECUAL_EEPROMRead(u16_location,(&aDataBuffer[u8_Counter]));
		u16_location++;
 2ee:	ce 01       	movw	r24, r28
	/* first Data address location */
	uint16_t u16_location = CARD_PROGRAMMED_CHECK_ADD;
	
	uint8_t u8_Counter =1;
	/* Read Data sequentially and Store it in the Data Buffer */  
	for(u8_Counter=1;u8_Counter<DATA_BUFFER_SIZE-1;u8_Counter++)
 2f0:	6a 97       	sbiw	r28, 0x1a	; 26
 2f2:	a1 f7       	brne	.-24     	; 0x2dc <APP_ReadAllData+0xc>
		ECUAL_EEPROMRead(u16_location,(&aDataBuffer[u8_Counter]));
		u16_location++;
		APP_SmallDelay();
	}
	
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <APP_TransDataOverSPI>:
/**********************************************************************************************/
void APP_TransDataOverSPI(void)
{
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	c8 e9       	ldi	r28, 0x98	; 152
 304:	d3 e0       	ldi	r29, 0x03	; 3
 306:	04 eb       	ldi	r16, 0xB4	; 180
 308:	13 e0       	ldi	r17, 0x03	; 3
	uint8_t u8_counter ;
	for(u8_counter=0;u8_counter<DATA_BUFFER_SIZE;u8_counter++)
	{
		MCAL_SPISlaveTrans(aDataBuffer[u8_counter]);
 30a:	89 91       	ld	r24, Y+
 30c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <MCAL_SPISlaveTrans>
}
/**********************************************************************************************/
void APP_TransDataOverSPI(void)
{
	uint8_t u8_counter ;
	for(u8_counter=0;u8_counter<DATA_BUFFER_SIZE;u8_counter++)
 310:	c0 17       	cp	r28, r16
 312:	d1 07       	cpc	r29, r17
 314:	d1 f7       	brne	.-12     	; 0x30a <APP_TransDataOverSPI+0x10>
	{
		MCAL_SPISlaveTrans(aDataBuffer[u8_counter]);
	}
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <APP_AppInit>:
/**************************************************************************************************
									      APIs
**************************************************************************************************/
void APP_AppInit(void)
{
	ECUAL_EEPROMInit();
 320:	0e 94 a4 02 	call	0x548	; 0x548 <ECUAL_EEPROMInit>
	USART_Init();
 324:	0e 94 aa 03 	call	0x754	; 0x754 <USART_Init>
	MCAL_SpiInit();
 328:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <MCAL_SpiInit>
	
	uint8_t u8_CARD_MODE;
	
	u8_CARD_MODE =APP_CheckCardState();
 32c:	0e 94 84 00 	call	0x108	; 0x108 <APP_CheckCardState>
	if (u8_CARD_MODE == PROGRAMMED)
 330:	81 11       	cpse	r24, r1
 332:	23 c0       	rjmp	.+70     	; 0x37a <APP_AppInit+0x5a>
	{
	/* Copy data from EEPROM TO Data buffer */
	APP_ReadAllData();
 334:	0e 94 68 01 	call	0x2d0	; 0x2d0 <APP_ReadAllData>
	/* Display the User Mode Message */
	APP_APPToTerminalResponse(UserModeMessage);
 338:	86 e3       	ldi	r24, 0x36	; 54
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
	while(1)
	{
		/* Receive Command */
		APP_ReceiveFromTerminal();
 340:	0e 94 49 00 	call	0x92	; 0x92 <APP_ReceiveFromTerminal>
		
		/* Compare with ADMIN Command */
		if (APP_CommandCompare(ADMIN)==EQUAL)
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 99 00 	call	0x132	; 0x132 <APP_CommandCompare>
 34a:	81 11       	cpse	r24, r1
 34c:	07 c0       	rjmp	.+14     	; 0x35c <APP_AppInit+0x3c>
		{
			CurrentModeState = ADMIN_MODE;
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 356:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 35a:	08 95       	ret
		}
		else if(APP_CommandCompare(USER)==EQUAL)
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 99 00 	call	0x132	; 0x132 <APP_CommandCompare>
 362:	81 11       	cpse	r24, r1
 364:	05 c0       	rjmp	.+10     	; 0x370 <APP_AppInit+0x50>
		{
			CurrentModeState = USER_MODE;
 366:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 36a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 36e:	08 95       	ret
		}
		else
		{
			/* Display the Wrong Command Message */
			APP_APPToTerminalResponse(WrongCommandMessage);
 370:	89 ec       	ldi	r24, 0xC9	; 201
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
		}
	}
 378:	e3 cf       	rjmp	.-58     	; 0x340 <APP_AppInit+0x20>
	
	
	}
	else{
		CurrentModeState = ENTRY_MODE;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 382:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 386:	08 95       	ret

00000388 <APP_UpdateState>:
	
}
/************************************************************************************************/
/***************************************************************************************************/
void APP_UpdateState(void)
{
 388:	cf 92       	push	r12
 38a:	df 92       	push	r13
 38c:	ef 92       	push	r14
 38e:	ff 92       	push	r15
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
	uint8_t u8_counter=0 ;
	uint8_t u8_flag =0;
	uint8_t u8_MaxSize;
	switch(CurrentModeState)
 398:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 39c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	91 05       	cpc	r25, r1
 3a4:	49 f0       	breq	.+18     	; 0x3b8 <APP_UpdateState+0x30>
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	91 05       	cpc	r25, r1
 3aa:	e9 f0       	breq	.+58     	; 0x3e6 <APP_UpdateState+0x5e>
 3ac:	89 2b       	or	r24, r25
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <APP_UpdateState+0x2a>
 3b0:	c2 c0       	rjmp	.+388    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
	{
		case USER_MODE :
		{
			
			APP_TransDataOverSPI();
 3b2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <APP_TransDataOverSPI>
			
			
			
			
			break;
 3b6:	bf c0       	rjmp	.+382    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
		case ENTRY_MODE :
		{
			while(1)
			{
				/* Display Not Programmed Message Message */
				APP_APPToTerminalResponse(NotProgrammedMessage);
 3b8:	80 e9       	ldi	r24, 0x90	; 144
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
				/* Receive Command */
				APP_ReceiveFromTerminal();
 3c0:	0e 94 49 00 	call	0x92	; 0x92 <APP_ReceiveFromTerminal>
				
				/* Compare with ADMIN Command */
				if (APP_CommandCompare(ADMIN)==EQUAL)
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 99 00 	call	0x132	; 0x132 <APP_CommandCompare>
 3ca:	81 11       	cpse	r24, r1
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <APP_UpdateState+0x54>
				{
					CurrentModeState = ADMIN_MODE;
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					/* Display the Wrong Command Message */
					APP_APPToTerminalResponse(WrongCommandMessage);
				}
				
			}
			break;
 3da:	ad c0       	rjmp	.+346    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
					break;
				}
				else
				{
					/* Display the Wrong Command Message */
					APP_APPToTerminalResponse(WrongCommandMessage);
 3dc:	89 ec       	ldi	r24, 0xC9	; 201
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
				}
				
			}
 3e4:	e9 cf       	rjmp	.-46     	; 0x3b8 <APP_UpdateState+0x30>
					 u8_counter=0 ;
					 u8_flag =0;
					for (u8_counter=0;u8_counter<u8_MaxSize-1;u8_counter++)
					{
						/* check if the name contains any numbers */
						if (aStringBuffer[u8_counter]>47 && aStringBuffer[u8_counter] < 58  )
 3e6:	c9 e9       	ldi	r28, 0x99	; 153
 3e8:	d2 e0       	ldi	r29, 0x02	; 2
			
			
			while(1)
			{
				/* Display Holder Name Message */
				APP_APPToTerminalResponse(HolderNameMessage);
 3ea:	83 e1       	ldi	r24, 0x13	; 19
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
				
				u8_MaxSize =APP_ReceiveFromTerminal();
 3f2:	0e 94 49 00 	call	0x92	; 0x92 <APP_ReceiveFromTerminal>
				if (u8_MaxSize > MAX_NAME_SIZE)
 3f6:	8b 30       	cpi	r24, 0x0B	; 11
 3f8:	70 f4       	brcc	.+28     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				}
				else 
				{ 
					 u8_counter=0 ;
					 u8_flag =0;
					for (u8_counter=0;u8_counter<u8_MaxSize-1;u8_counter++)
 3fa:	68 2f       	mov	r22, r24
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	61 50       	subi	r22, 0x01	; 1
 400:	71 09       	sbc	r23, r1
 402:	16 16       	cp	r1, r22
 404:	17 06       	cpc	r1, r23
 406:	0c f0       	brlt	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	64 c0       	rjmp	.+200    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
					{
						/* check if the name contains any numbers */
						if (aStringBuffer[u8_counter]>47 && aStringBuffer[u8_counter] < 58  )
 40a:	88 81       	ld	r24, Y
 40c:	80 53       	subi	r24, 0x30	; 48
 40e:	8a 30       	cpi	r24, 0x0A	; 10
 410:	70 f0       	brcs	.+28     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	11 c0       	rjmp	.+34     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				APP_APPToTerminalResponse(HolderNameMessage);
				
				u8_MaxSize =APP_ReceiveFromTerminal();
				if (u8_MaxSize > MAX_NAME_SIZE)
				{
					APP_APPToTerminalResponse(HolderNameExceedMax);
 416:	8b ed       	ldi	r24, 0xDB	; 219
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
 41e:	e5 cf       	rjmp	.-54     	; 0x3ea <APP_UpdateState+0x62>
					 u8_counter=0 ;
					 u8_flag =0;
					for (u8_counter=0;u8_counter<u8_MaxSize-1;u8_counter++)
					{
						/* check if the name contains any numbers */
						if (aStringBuffer[u8_counter]>47 && aStringBuffer[u8_counter] < 58  )
 420:	f9 01       	movw	r30, r18
 422:	e7 56       	subi	r30, 0x67	; 103
 424:	fd 4f       	sbci	r31, 0xFD	; 253
 426:	90 81       	ld	r25, Z
 428:	90 53       	subi	r25, 0x30	; 48
 42a:	9a 30       	cpi	r25, 0x0A	; 10
 42c:	28 f4       	brcc	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
						{
							APP_APPToTerminalResponse("The name must not contains any numbers\r");
 42e:	8a ed       	ldi	r24, 0xDA	; 218
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
 436:	d9 cf       	rjmp	.-78     	; 0x3ea <APP_UpdateState+0x62>
				}
				else 
				{ 
					 u8_counter=0 ;
					 u8_flag =0;
					for (u8_counter=0;u8_counter<u8_MaxSize-1;u8_counter++)
 438:	4f 5f       	subi	r20, 0xFF	; 255
 43a:	24 2f       	mov	r18, r20
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	26 17       	cp	r18, r22
 440:	37 07       	cpc	r19, r23
 442:	74 f3       	brlt	.-36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 444:	46 c0       	rjmp	.+140    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			
			}
			while(1)
			{
				/* Display PAN Message */
				APP_APPToTerminalResponse(PrimaryACCNUMMessage);
 446:	82 eb       	ldi	r24, 0xB2	; 178
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
				
				/* get Entered Data and check length */
				/* should be 9 characters */
				u8_MaxSize =APP_ReceiveFromTerminal();
 44e:	0e 94 49 00 	call	0x92	; 0x92 <APP_ReceiveFromTerminal>
				if (u8_MaxSize > MAX_PAN_SIZE || u8_MaxSize < MAX_PAN_SIZE )
 452:	8a 30       	cpi	r24, 0x0A	; 10
 454:	31 f4       	brne	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
					u8_counter=0 ;
					u8_flag =0;
					/* check if the PAN contains any characters */
					for (u8_counter=0;u8_counter<MAX_PAN_SIZE-1;u8_counter++)
					{
					    if (aStringBuffer[u8_counter] < 48 || aStringBuffer[u8_counter] > 58  )
 456:	f7 01       	movw	r30, r14
 458:	80 81       	ld	r24, Z
 45a:	80 53       	subi	r24, 0x30	; 48
 45c:	8b 30       	cpi	r24, 0x0B	; 11
 45e:	30 f0       	brcs	.+12     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 460:	0d c0       	rjmp	.+26     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
				/* get Entered Data and check length */
				/* should be 9 characters */
				u8_MaxSize =APP_ReceiveFromTerminal();
				if (u8_MaxSize > MAX_PAN_SIZE || u8_MaxSize < MAX_PAN_SIZE )
				{
					APP_APPToTerminalResponse(PANNumExceedMax);
 462:	82 e9       	ldi	r24, 0x92	; 146
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
 46a:	ed cf       	rjmp	.-38     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 46c:	d0 2e       	mov	r13, r16
 46e:	c1 2e       	mov	r12, r17
					u8_counter=0 ;
					u8_flag =0;
					/* check if the PAN contains any characters */
					for (u8_counter=0;u8_counter<MAX_PAN_SIZE-1;u8_counter++)
					{
					    if (aStringBuffer[u8_counter] < 48 || aStringBuffer[u8_counter] > 58  )
 470:	ea e9       	ldi	r30, 0x9A	; 154
 472:	f2 e0       	ldi	r31, 0x02	; 2
 474:	81 91       	ld	r24, Z+
 476:	80 53       	subi	r24, 0x30	; 48
 478:	8b 30       	cpi	r24, 0x0B	; 11
 47a:	28 f0       	brcs	.+10     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
					    {
						  APP_APPToTerminalResponse("The PAN must not contains any characters\r");
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
 484:	e0 cf       	rjmp	.-64     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				else
				{
					u8_counter=0 ;
					u8_flag =0;
					/* check if the PAN contains any characters */
					for (u8_counter=0;u8_counter<MAX_PAN_SIZE-1;u8_counter++)
 486:	ec 17       	cp	r30, r28
 488:	fd 07       	cpc	r31, r29
 48a:	a1 f7       	brne	.-24     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 48c:	32 c0       	rjmp	.+100    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			
			
			while(1)
			{
				/* Display PIN Message */
				APP_APPToTerminalResponse(PINMessage);
 48e:	8c e7       	ldi	r24, 0x7C	; 124
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
				
				/* get Entered Data and check length */
				/* should be 4 characters */
				
				u8_MaxSize = APP_ReceiveFromTerminal();
 496:	0e 94 49 00 	call	0x92	; 0x92 <APP_ReceiveFromTerminal>
				if (u8_MaxSize > MAX_PIN_SIZE || u8_MaxSize < MAX_PIN_SIZE )
 49a:	85 30       	cpi	r24, 0x05	; 5
 49c:	31 f4       	brne	.+12     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
					u8_counter=0 ;
					u8_flag =0;
					/* check if the PIN contains any characters */
					for (u8_counter=0;u8_counter<MAX_PIN_SIZE-1;u8_counter++)
					{
						if (aStringBuffer[u8_counter] < 48 || aStringBuffer[u8_counter] > 58  )
 49e:	f8 01       	movw	r30, r16
 4a0:	80 81       	ld	r24, Z
 4a2:	80 53       	subi	r24, 0x30	; 48
 4a4:	8b 30       	cpi	r24, 0x0B	; 11
 4a6:	30 f0       	brcs	.+12     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
				/* should be 4 characters */
				
				u8_MaxSize = APP_ReceiveFromTerminal();
				if (u8_MaxSize > MAX_PIN_SIZE || u8_MaxSize < MAX_PIN_SIZE )
				{
					APP_APPToTerminalResponse(PINNumExceedMax);
 4aa:	82 e6       	ldi	r24, 0x62	; 98
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
 4b2:	ed cf       	rjmp	.-38     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
					u8_counter=0 ;
					u8_flag =0;
					/* check if the PIN contains any characters */
					for (u8_counter=0;u8_counter<MAX_PIN_SIZE-1;u8_counter++)
					{
						if (aStringBuffer[u8_counter] < 48 || aStringBuffer[u8_counter] > 58  )
 4b4:	ed 2d       	mov	r30, r13
 4b6:	fc 2d       	mov	r31, r12
 4b8:	81 91       	ld	r24, Z+
 4ba:	80 53       	subi	r24, 0x30	; 48
 4bc:	8b 30       	cpi	r24, 0x0B	; 11
 4be:	28 f0       	brcs	.+10     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
						{
							APP_APPToTerminalResponse("The PIN must not contains any characters\r");
 4c0:	8c e2       	ldi	r24, 0x2C	; 44
 4c2:	92 e0       	ldi	r25, 0x02	; 2
 4c4:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
 4c8:	e2 cf       	rjmp	.-60     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
				else
				{
					u8_counter=0 ;
					u8_flag =0;
					/* check if the PIN contains any characters */
					for (u8_counter=0;u8_counter<MAX_PIN_SIZE-1;u8_counter++)
 4ca:	ce 17       	cp	r28, r30
 4cc:	df 07       	cpc	r29, r31
 4ce:	a1 f7       	brne	.-24     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4d0:	1a c0       	rjmp	.+52     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
					{
						continue;
					}
					else
					{
						APP_StoreDataEEPROM(aStringBuffer,CARD_HOLDER_NAME);
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	89 e9       	ldi	r24, 0x99	; 153
 4d6:	92 e0       	ldi	r25, 0x02	; 2
 4d8:	0e 94 15 01 	call	0x22a	; 0x22a <APP_StoreDataEEPROM>
					u8_counter=0 ;
					u8_flag =0;
					/* check if the PAN contains any characters */
					for (u8_counter=0;u8_counter<MAX_PAN_SIZE-1;u8_counter++)
					{
					    if (aStringBuffer[u8_counter] < 48 || aStringBuffer[u8_counter] > 58  )
 4dc:	0f 2e       	mov	r0, r31
 4de:	f9 e9       	ldi	r31, 0x99	; 153
 4e0:	ef 2e       	mov	r14, r31
 4e2:	f2 e0       	ldi	r31, 0x02	; 2
 4e4:	ff 2e       	mov	r15, r31
 4e6:	f0 2d       	mov	r31, r0
 4e8:	0a e9       	ldi	r16, 0x9A	; 154
 4ea:	12 e0       	ldi	r17, 0x02	; 2
 4ec:	c2 ea       	ldi	r28, 0xA2	; 162
 4ee:	d2 e0       	ldi	r29, 0x02	; 2
						continue;
					}
					else
					{
						APP_StoreDataEEPROM(aStringBuffer,CARD_HOLDER_NAME);
						break;
 4f0:	aa cf       	rjmp	.-172    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
					{
						continue;
					}
					else
					{
						APP_StoreDataEEPROM(aStringBuffer,PA_NUM);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	89 e9       	ldi	r24, 0x99	; 153
 4f6:	92 e0       	ldi	r25, 0x02	; 2
 4f8:	0e 94 15 01 	call	0x22a	; 0x22a <APP_StoreDataEEPROM>
					u8_counter=0 ;
					u8_flag =0;
					/* check if the PIN contains any characters */
					for (u8_counter=0;u8_counter<MAX_PIN_SIZE-1;u8_counter++)
					{
						if (aStringBuffer[u8_counter] < 48 || aStringBuffer[u8_counter] > 58  )
 4fc:	09 e9       	ldi	r16, 0x99	; 153
 4fe:	12 e0       	ldi	r17, 0x02	; 2
 500:	cd e9       	ldi	r28, 0x9D	; 157
 502:	d2 e0       	ldi	r29, 0x02	; 2
						continue;
					}
					else
					{
						APP_StoreDataEEPROM(aStringBuffer,PA_NUM);
						break;
 504:	c4 cf       	rjmp	.-120    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
					{
						continue;
					}
					else
					{
						APP_StoreDataEEPROM(aStringBuffer,PIN);
 506:	62 e0       	ldi	r22, 0x02	; 2
 508:	89 e9       	ldi	r24, 0x99	; 153
 50a:	92 e0       	ldi	r25, 0x02	; 2
 50c:	0e 94 15 01 	call	0x22a	; 0x22a <APP_StoreDataEEPROM>
			}
			
			
			
			/* Write the first loc 55 to indicate that the card is Programmed */
			ECUAL_EEPROMWrite(CARD_PROGRAMMED_CHECK_ADD,FIRST_LOC_Data);
 510:	67 e3       	ldi	r22, 0x37	; 55
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 af 02 	call	0x55e	; 0x55e <ECUAL_EEPROMWrite>
			/* Enter User Mode */
			
			/* Copy data from EEPROM TO Data buffer */
			APP_ReadAllData();
 51a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <APP_ReadAllData>
			
			CurrentModeState = USER_MODE;
 51e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 522:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			APP_APPToTerminalResponse("Data updated successfully \r");
 526:	86 e5       	ldi	r24, 0x56	; 86
 528:	92 e0       	ldi	r25, 0x02	; 2
 52a:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
			APP_APPToTerminalResponse("user mode started \r");
 52e:	82 e7       	ldi	r24, 0x72	; 114
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_APPToTerminalResponse>
		
	}
	 
}

}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	df 90       	pop	r13
 544:	cf 90       	pop	r12
 546:	08 95       	ret

00000548 <ECUAL_EEPROMInit>:
/********************************************************************/

void ECUAL_EEPROMInit(void)
{
	/* MCU Configured as a Master */
	Master_Configure_t.Master_ADDRESS=1;
 548:	e4 eb       	ldi	r30, 0xB4	; 180
 54a:	f3 e0       	ldi	r31, 0x03	; 3
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	82 83       	std	Z+2, r24	; 0x02
	Master_Configure_t.TWBR_VALUE=100;
 550:	84 e6       	ldi	r24, 0x64	; 100
 552:	80 83       	st	Z, r24
	Master_Configure_t.TWPS_PRESCAL_VAL=NO_PRESCALE;
 554:	11 82       	std	Z+1, r1	; 0x01
	MCAL_I2CMasterInit(&Master_Configure_t);
 556:	cf 01       	movw	r24, r30
 558:	0e 94 ff 02 	call	0x5fe	; 0x5fe <MCAL_I2CMasterInit>
 55c:	08 95       	ret

0000055e <ECUAL_EEPROMWrite>:
	
}  
                        
void ECUAL_EEPROMWrite( uint16_t u16_MEMAddress , uint8_t u8_DataWrite)
{
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	00 d0       	rcall	.+0      	; 0x564 <ECUAL_EEPROMWrite+0x6>
 564:	1f 92       	push	r1
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	6b 83       	std	Y+3, r22	; 0x03
	/* the First word address the MSB 8 bits of the address */ 
	uint8_t u8_FW_ADD =(uint8_t)(u16_MEMAddress>>8);
 56c:	99 83       	std	Y+1, r25	; 0x01
	/* second word address the LSB 8 bits of the address */
	uint8_t u8_SW_ADD=(uint8_t)(u16_MEMAddress);
 56e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ControlByte =0b01010000;  //1010 then 000 slave address then 0 for write operation
	// this byte will be shifted in i2c write will be 10100000 and for repeat start 10100001
	
		
	/* initiate the start condition with control byte */
	MCAL_I2CMaterEstablishComm(u8_ControlByte);
 570:	80 e5       	ldi	r24, 0x50	; 80
 572:	0e 94 0a 03 	call	0x614	; 0x614 <MCAL_I2CMaterEstablishComm>
	
	/*first word memory address in EEPROM */
	MCAL_I2CMasterWrightData(&u8_FW_ADD);
 576:	ce 01       	movw	r24, r28
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	0e 94 45 03 	call	0x68a	; 0x68a <MCAL_I2CMasterWrightData>
	
	/*first word memory address in EEPROM */
	MCAL_I2CMasterWrightData(&u8_SW_ADD);
 57e:	ce 01       	movw	r24, r28
 580:	02 96       	adiw	r24, 0x02	; 2
 582:	0e 94 45 03 	call	0x68a	; 0x68a <MCAL_I2CMasterWrightData>
	
	/* write data into the address */
	MCAL_I2CMasterWrightData(&u8_DataWrite);
 586:	ce 01       	movw	r24, r28
 588:	03 96       	adiw	r24, 0x03	; 3
 58a:	0e 94 45 03 	call	0x68a	; 0x68a <MCAL_I2CMasterWrightData>
	
	/* send stop condition */
	MCAL_I2CMasterStopCondition();
 58e:	0e 94 65 03 	call	0x6ca	; 0x6ca <MCAL_I2CMasterStopCondition>
}
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <ECUAL_EEPROMRead>:

void ECUAL_EEPROMRead( uint16_t u16_MEMAddress , uint8_t *u8_DataRead)
{
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <ECUAL_EEPROMRead+0xa>
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	8b 01       	movw	r16, r22
	
	/* initialize EEPROM control byte */
	 uint8_t u8_ControlByte =0b01010000;  //1010 then 000 slave address then 0 for write operation  
	                                     // this byte will be shifted in i2c write will be 10100000 and for repeat start 10100001
	/* the First word address the MSB 8 bits of the address */
	uint8_t u8_FW_ADD =(uint8_t)(u16_MEMAddress>>8);
 5ae:	99 83       	std	Y+1, r25	; 0x01
	/* second word address the LSB 8 bits of the address */
	uint8_t u8_SW_ADD=(uint8_t)(u16_MEMAddress);
 5b0:	8a 83       	std	Y+2, r24	; 0x02
	
	
	
	/* initiate the start condition with control byte */
	MCAL_I2CMaterEstablishComm(u8_ControlByte);
 5b2:	80 e5       	ldi	r24, 0x50	; 80
 5b4:	0e 94 0a 03 	call	0x614	; 0x614 <MCAL_I2CMaterEstablishComm>
	
	/*first word memory address in EEPROM */
	MCAL_I2CMasterWrightData(&u8_FW_ADD);
 5b8:	ce 01       	movw	r24, r28
 5ba:	01 96       	adiw	r24, 0x01	; 1
 5bc:	0e 94 45 03 	call	0x68a	; 0x68a <MCAL_I2CMasterWrightData>
	
	/*first word memory address in EEPROM */
	MCAL_I2CMasterWrightData(&u8_SW_ADD);
 5c0:	ce 01       	movw	r24, r28
 5c2:	02 96       	adiw	r24, 0x02	; 2
 5c4:	0e 94 45 03 	call	0x68a	; 0x68a <MCAL_I2CMasterWrightData>
	
	
	
	/* repeated start to read */
	MCAL_I2CMasterRepeatedStart(u8_ControlByte);
 5c8:	80 e5       	ldi	r24, 0x50	; 80
 5ca:	0e 94 27 03 	call	0x64e	; 0x64e <MCAL_I2CMasterRepeatedStart>
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	01 96       	adiw	r24, 0x01	; 1
	
	/* Small delay */
	uint32_t counter;
	for (counter=0;counter<5000;counter++);
 5d4:	88 38       	cpi	r24, 0x88	; 136
 5d6:	23 e1       	ldi	r18, 0x13	; 19
 5d8:	92 07       	cpc	r25, r18
 5da:	d9 f7       	brne	.-10     	; 0x5d2 <ECUAL_EEPROMRead+0x34>
	
	/* Read Data */
	MCAL_I2CMasterReadsendNACK(u8_DataRead);
 5dc:	c8 01       	movw	r24, r16
 5de:	0e 94 58 03 	call	0x6b0	; 0x6b0 <MCAL_I2CMasterReadsendNACK>
	
	/* send stop condition */
	MCAL_I2CMasterStopCondition();
 5e2:	0e 94 65 03 	call	0x6ca	; 0x6ca <MCAL_I2CMasterStopCondition>
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	08 95       	ret

000005f4 <main>:
 * Author : Shady Mamdouh 
 */ 
#include "APP/APP.h"
int main(void)
{
    APP_AppInit();
 5f4:	0e 94 90 01 	call	0x320	; 0x320 <APP_AppInit>
    while (1) 
    {
		
		APP_UpdateState();
 5f8:	0e 94 c4 01 	call	0x388	; 0x388 <APP_UpdateState>
 5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <main+0x4>

000005fe <MCAL_I2CMasterInit>:
	else if (u8State_reg==Data_received_NOTACK_sent)
	{
		return Data_received_NOTACK_sent;
	}
	
}
 5fe:	fc 01       	movw	r30, r24
 600:	91 b1       	in	r25, 0x01	; 1
 602:	81 81       	ldd	r24, Z+1	; 0x01
 604:	89 2b       	or	r24, r25
 606:	81 b9       	out	0x01, r24	; 1
 608:	80 81       	ld	r24, Z
 60a:	80 b9       	out	0x00, r24	; 0
 60c:	82 81       	ldd	r24, Z+2	; 0x02
 60e:	88 0f       	add	r24, r24
 610:	82 b9       	out	0x02, r24	; 2
 612:	08 95       	ret

00000614 <MCAL_I2CMaterEstablishComm>:
 614:	94 ea       	ldi	r25, 0xA4	; 164
 616:	96 bf       	out	0x36, r25	; 54
 618:	06 b6       	in	r0, 0x36	; 54
 61a:	07 fe       	sbrs	r0, 7
 61c:	fd cf       	rjmp	.-6      	; 0x618 <MCAL_I2CMaterEstablishComm+0x4>
 61e:	91 b1       	in	r25, 0x01	; 1
 620:	98 7f       	andi	r25, 0xF8	; 248
 622:	98 30       	cpi	r25, 0x08	; 8
 624:	71 f4       	brne	.+28     	; 0x642 <MCAL_I2CMaterEstablishComm+0x2e>
 626:	88 0f       	add	r24, r24
 628:	83 b9       	out	0x03, r24	; 3
 62a:	84 e8       	ldi	r24, 0x84	; 132
 62c:	86 bf       	out	0x36, r24	; 54
 62e:	06 b6       	in	r0, 0x36	; 54
 630:	07 fe       	sbrs	r0, 7
 632:	fd cf       	rjmp	.-6      	; 0x62e <MCAL_I2CMaterEstablishComm+0x1a>
 634:	81 b1       	in	r24, 0x01	; 1
 636:	88 7f       	andi	r24, 0xF8	; 248
 638:	88 31       	cpi	r24, 0x18	; 24
 63a:	29 f0       	breq	.+10     	; 0x646 <MCAL_I2CMaterEstablishComm+0x32>
 63c:	80 32       	cpi	r24, 0x20	; 32
 63e:	29 f0       	breq	.+10     	; 0x64a <MCAL_I2CMaterEstablishComm+0x36>
 640:	08 95       	ret
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	08 95       	ret
 646:	88 e1       	ldi	r24, 0x18	; 24
 648:	08 95       	ret
 64a:	80 e2       	ldi	r24, 0x20	; 32
 64c:	08 95       	ret

0000064e <MCAL_I2CMasterRepeatedStart>:
 64e:	94 ea       	ldi	r25, 0xA4	; 164
 650:	96 bf       	out	0x36, r25	; 54
 652:	06 b6       	in	r0, 0x36	; 54
 654:	07 fe       	sbrs	r0, 7
 656:	fd cf       	rjmp	.-6      	; 0x652 <MCAL_I2CMasterRepeatedStart+0x4>
 658:	91 b1       	in	r25, 0x01	; 1
 65a:	98 7f       	andi	r25, 0xF8	; 248
 65c:	90 31       	cpi	r25, 0x10	; 16
 65e:	79 f4       	brne	.+30     	; 0x67e <MCAL_I2CMasterRepeatedStart+0x30>
 660:	88 0f       	add	r24, r24
 662:	81 60       	ori	r24, 0x01	; 1
 664:	83 b9       	out	0x03, r24	; 3
 666:	84 e8       	ldi	r24, 0x84	; 132
 668:	86 bf       	out	0x36, r24	; 54
 66a:	06 b6       	in	r0, 0x36	; 54
 66c:	07 fe       	sbrs	r0, 7
 66e:	fd cf       	rjmp	.-6      	; 0x66a <MCAL_I2CMasterRepeatedStart+0x1c>
 670:	81 b1       	in	r24, 0x01	; 1
 672:	88 7f       	andi	r24, 0xF8	; 248
 674:	80 34       	cpi	r24, 0x40	; 64
 676:	29 f0       	breq	.+10     	; 0x682 <MCAL_I2CMasterRepeatedStart+0x34>
 678:	88 34       	cpi	r24, 0x48	; 72
 67a:	29 f0       	breq	.+10     	; 0x686 <MCAL_I2CMasterRepeatedStart+0x38>
 67c:	08 95       	ret
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	08 95       	ret
 682:	80 e4       	ldi	r24, 0x40	; 64
 684:	08 95       	ret
 686:	88 e4       	ldi	r24, 0x48	; 72
 688:	08 95       	ret

0000068a <MCAL_I2CMasterWrightData>:
 68a:	fc 01       	movw	r30, r24
 68c:	80 81       	ld	r24, Z
 68e:	83 b9       	out	0x03, r24	; 3
 690:	84 e8       	ldi	r24, 0x84	; 132
 692:	86 bf       	out	0x36, r24	; 54
 694:	06 b6       	in	r0, 0x36	; 54
 696:	07 fe       	sbrs	r0, 7
 698:	fd cf       	rjmp	.-6      	; 0x694 <MCAL_I2CMasterWrightData+0xa>
 69a:	81 b1       	in	r24, 0x01	; 1
 69c:	88 7f       	andi	r24, 0xF8	; 248
 69e:	88 32       	cpi	r24, 0x28	; 40
 6a0:	19 f0       	breq	.+6      	; 0x6a8 <MCAL_I2CMasterWrightData+0x1e>
 6a2:	80 33       	cpi	r24, 0x30	; 48
 6a4:	19 f0       	breq	.+6      	; 0x6ac <MCAL_I2CMasterWrightData+0x22>
 6a6:	08 95       	ret
 6a8:	88 e2       	ldi	r24, 0x28	; 40
 6aa:	08 95       	ret
 6ac:	80 e3       	ldi	r24, 0x30	; 48
 6ae:	08 95       	ret

000006b0 <MCAL_I2CMasterReadsendNACK>:
I2C_status_codes MCAL_I2CMasterReadsendNACK(uint8_t *readData)
{
	uint8_t u8State_reg=0;
	/* Clear the TWINT Flag by writing 1 and enable I2c  */
	TWCR =(1<<TWCR_TWINT)|(1<<TWCR_TWEN);
 6b0:	24 e8       	ldi	r18, 0x84	; 132
 6b2:	26 bf       	out	0x36, r18	; 54
	
	/* wait the flag */
	while(!(TWCR &(1<<TWCR_TWINT)));
 6b4:	06 b6       	in	r0, 0x36	; 54
 6b6:	07 fe       	sbrs	r0, 7
 6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <MCAL_I2CMasterReadsendNACK+0x4>
	
	//PORTA=TWDR;
	*readData =TWDR;
 6ba:	23 b1       	in	r18, 0x03	; 3
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18
	//PORTA = *readData;
	/* Read TWI status register the 0XF8 to clear the first LSB 3 bits */
	u8State_reg =TWSR & 0xF8;
 6c0:	81 b1       	in	r24, 0x01	; 1
	
	if (u8State_reg==Data_received_NOTACK_sent)
 6c2:	88 7f       	andi	r24, 0xF8	; 248
 6c4:	88 35       	cpi	r24, 0x58	; 88
 6c6:	01 f0       	breq	.+0      	; 0x6c8 <MCAL_I2CMasterReadsendNACK+0x18>
		
		return Data_received_NOTACK_sent;
	}
	
	
}
 6c8:	08 95       	ret

000006ca <MCAL_I2CMasterStopCondition>:
void MCAL_I2CMasterStopCondition(void)
{
	
	/* Clear the TWINT Flag by writing 1 and enable I2c Enable stop condition  */
	TWCR =(1<<TWCR_TWINT)|(1<<TWCR_TWEN)|(1<<TWCR_TWSTO);
 6ca:	84 e9       	ldi	r24, 0x94	; 148
 6cc:	86 bf       	out	0x36, r24	; 54
	
	/* wait the stop condition finished */ 
	while(TWCR&(1<<TWCR_TWSTO));
 6ce:	06 b6       	in	r0, 0x36	; 54
 6d0:	04 fc       	sbrc	r0, 4
 6d2:	fd cf       	rjmp	.-6      	; 0x6ce <MCAL_I2CMasterStopCondition+0x4>
	
}
 6d4:	08 95       	ret

000006d6 <MCAL_SpiInit>:
	/* wait until flag is set */
	while(!(SPSR &(1<<SPSR_SPIF)));
	
	
	/* received Data   */
	*ReceivedData = SPDR;
 6d6:	6e 9a       	sbi	0x0d, 6	; 13
 6d8:	6c 98       	cbi	0x0d, 4	; 13
 6da:	bc 98       	cbi	0x17, 4	; 23
 6dc:	bd 98       	cbi	0x17, 5	; 23
 6de:	be 9a       	sbi	0x17, 6	; 23
 6e0:	bf 98       	cbi	0x17, 7	; 23
 6e2:	08 95       	ret

000006e4 <MCAL_SPISlaveTrans>:
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	1f 92       	push	r1
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	8f b9       	out	0x0f, r24	; 15
 6f0:	77 9b       	sbis	0x0e, 7	; 14
 6f2:	fe cf       	rjmp	.-4      	; 0x6f0 <MCAL_SPISlaveTrans+0xc>
 6f4:	8f b1       	in	r24, 0x0f	; 15
 6f6:	89 83       	std	Y+1, r24	; 0x01
 6f8:	0f 90       	pop	r0
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	08 95       	ret

00000700 <__vector_12>:
	/* reset SS to High */
	//PORTB |=(1<<PB_SS);
}

void __vector_12(void)
{
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	2f 93       	push	r18
 70c:	3f 93       	push	r19
 70e:	4f 93       	push	r20
 710:	5f 93       	push	r21
 712:	6f 93       	push	r22
 714:	7f 93       	push	r23
 716:	8f 93       	push	r24
 718:	9f 93       	push	r25
 71a:	af 93       	push	r26
 71c:	bf 93       	push	r27
 71e:	ef 93       	push	r30
 720:	ff 93       	push	r31
	SPDR = TransSPDR_Value ;
 722:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <TransSPDR_Value>
 726:	8f b9       	out	0x0f, r24	; 15
	
	
	
	pCallBack();
 728:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <pCallBack>
 72c:	f0 91 b9 03 	lds	r31, 0x03B9	; 0x8003b9 <pCallBack+0x1>
 730:	09 95       	icall
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <USART_Init>:
}
UART_ERROR_t USART_RX_Disable(void)
{
	UCSRB &=~(1<<UCSRB_RXEN);
	return UART_NO_ERROR;
}
 754:	59 98       	cbi	0x0b, 1	; 11
 756:	8c e0       	ldi	r24, 0x0C	; 12
 758:	89 b9       	out	0x09, r24	; 9
 75a:	10 bc       	out	0x20, r1	; 32
 75c:	80 b5       	in	r24, 0x20	; 32
 75e:	86 68       	ori	r24, 0x86	; 134
 760:	80 bd       	out	0x20, r24	; 32
 762:	80 b5       	in	r24, 0x20	; 32
 764:	80 68       	ori	r24, 0x80	; 128
 766:	80 bd       	out	0x20, r24	; 32
 768:	80 b5       	in	r24, 0x20	; 32
 76a:	80 68       	ori	r24, 0x80	; 128
 76c:	80 bd       	out	0x20, r24	; 32
 76e:	80 b5       	in	r24, 0x20	; 32
 770:	80 68       	ori	r24, 0x80	; 128
 772:	80 bd       	out	0x20, r24	; 32
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	08 95       	ret

00000778 <USART_Transmit>:
 778:	53 9a       	sbi	0x0a, 3	; 10
 77a:	5d 9b       	sbis	0x0b, 5	; 11
 77c:	fe cf       	rjmp	.-4      	; 0x77a <USART_Transmit+0x2>
 77e:	8c b9       	out	0x0c, r24	; 12
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	08 95       	ret

00000784 <USART_Receive>:
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	79 f0       	breq	.+30     	; 0x7a6 <USART_Receive+0x22>
 788:	54 9a       	sbi	0x0a, 4	; 10
 78a:	fc 01       	movw	r30, r24
 78c:	11 82       	std	Z+1, r1	; 0x01
 78e:	10 82       	st	Z, r1
 790:	5f 9b       	sbis	0x0b, 7	; 11
 792:	fe cf       	rjmp	.-4      	; 0x790 <USART_Receive+0xc>
 794:	5a 99       	sbic	0x0b, 2	; 11
 796:	09 c0       	rjmp	.+18     	; 0x7aa <USART_Receive+0x26>
 798:	2c b1       	in	r18, 0x0c	; 12
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	fc 01       	movw	r30, r24
 79e:	31 83       	std	Z+1, r19	; 0x01
 7a0:	20 83       	st	Z, r18
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	08 95       	ret
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	08 95       	ret
 7aa:	83 e0       	ldi	r24, 0x03	; 3
 7ac:	08 95       	ret

000007ae <USART_UDRInterruptDisable>:
 7ae:	55 98       	cbi	0x0a, 5	; 10
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	08 95       	ret

000007b4 <__vector_14>:
/************UDRE ISR***************************************************/
void __vector_14(void)
{
 7b4:	1f 92       	push	r1
 7b6:	0f 92       	push	r0
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	0f 92       	push	r0
 7bc:	11 24       	eor	r1, r1
 7be:	2f 93       	push	r18
 7c0:	3f 93       	push	r19
 7c2:	4f 93       	push	r20
 7c4:	5f 93       	push	r21
 7c6:	6f 93       	push	r22
 7c8:	7f 93       	push	r23
 7ca:	8f 93       	push	r24
 7cc:	9f 93       	push	r25
 7ce:	af 93       	push	r26
 7d0:	bf 93       	push	r27
 7d2:	ef 93       	push	r30
 7d4:	ff 93       	push	r31
	//PORTA |=(1<<0);
	 UDR=U8_Transmit_UDR;
 7d6:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <U8_Transmit_UDR>
 7da:	8c b9       	out	0x0c, r24	; 12
	USART_UDRInterruptDisable();
 7dc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <USART_UDRInterruptDisable>
	UDRE_CallBack();
 7e0:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <UDRE_CallBack>
 7e4:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <UDRE_CallBack+0x1>
 7e8:	09 95       	icall
}
 7ea:	ff 91       	pop	r31
 7ec:	ef 91       	pop	r30
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <__vector_13>:
/**************************************/

/*************RXC ISR*******************/

void __vector_13(void)
{
 80c:	1f 92       	push	r1
 80e:	0f 92       	push	r0
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	0f 92       	push	r0
 814:	11 24       	eor	r1, r1
 816:	2f 93       	push	r18
 818:	3f 93       	push	r19
 81a:	4f 93       	push	r20
 81c:	5f 93       	push	r21
 81e:	6f 93       	push	r22
 820:	7f 93       	push	r23
 822:	8f 93       	push	r24
 824:	9f 93       	push	r25
 826:	af 93       	push	r26
 828:	bf 93       	push	r27
 82a:	ef 93       	push	r30
 82c:	ff 93       	push	r31
	*U8_Receive_UDR =UDR;
 82e:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <U8_Receive_UDR>
 832:	f0 91 bc 03 	lds	r31, 0x03BC	; 0x8003bc <U8_Receive_UDR+0x1>
 836:	8c b1       	in	r24, 0x0c	; 12
 838:	80 83       	st	Z, r24
	
	RXC_CallBack();
 83a:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <__data_end>
 83e:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <__data_end+0x1>
 842:	09 95       	icall
}
 844:	ff 91       	pop	r31
 846:	ef 91       	pop	r30
 848:	bf 91       	pop	r27
 84a:	af 91       	pop	r26
 84c:	9f 91       	pop	r25
 84e:	8f 91       	pop	r24
 850:	7f 91       	pop	r23
 852:	6f 91       	pop	r22
 854:	5f 91       	pop	r21
 856:	4f 91       	pop	r20
 858:	3f 91       	pop	r19
 85a:	2f 91       	pop	r18
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	0f 90       	pop	r0
 862:	1f 90       	pop	r1
 864:	18 95       	reti

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
